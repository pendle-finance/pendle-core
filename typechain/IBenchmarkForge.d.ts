/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBenchmarkForgeInterface extends ethers.utils.Interface {
  functions: {
    "core()": FunctionFragment;
    "forgeId()": FunctionFragment;
    "newYieldContracts(address,uint256)": FunctionFragment;
    "redeemAfterExpiry(address,address,uint256,address)": FunctionFragment;
    "redeemDueInterests(address,address,uint256)": FunctionFragment;
    "redeemDueInterestsBeforeTransfer(address,uint256,address)": FunctionFragment;
    "redeemUnderlying(address,address,uint256,uint256,address)": FunctionFragment;
    "tokenizeYield(address,address,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(functionFragment: "forgeId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newYieldContracts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAfterExpiry",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterests",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterestsBeforeTransfer",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizeYield",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forgeId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newYieldContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAfterExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterestsBeforeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenizeYield",
    data: BytesLike
  ): Result;

  events: {
    "MintYieldToken(address,uint256)": EventFragment;
    "NewYieldContracts(address,address,uint256)": EventFragment;
    "RedeemYieldToken(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintYieldToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewYieldContracts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemYieldToken"): EventFragment;
}

export class IBenchmarkForge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBenchmarkForgeInterface;

  functions: {
    core(overrides?: CallOverrides): Promise<[string]>;

    "core()"(overrides?: CallOverrides): Promise<[string]>;

    forgeId(overrides?: CallOverrides): Promise<[string]>;

    "forgeId()"(overrides?: CallOverrides): Promise<[string]>;

    newYieldContracts(
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newYieldContracts(address,uint256)"(
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemAfterExpiry(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemAfterExpiry(address,address,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemDueInterests(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemDueInterests(address,address,uint256)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemDueInterestsBeforeTransfer(
      underlyingAsset: string,
      expiry: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
      underlyingAsset: string,
      expiry: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToRedeem: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemUnderlying(address,address,uint256,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToRedeem: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenizeYield(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToTokenize: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenizeYield(address,address,uint256,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToTokenize: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  core(overrides?: CallOverrides): Promise<string>;

  "core()"(overrides?: CallOverrides): Promise<string>;

  forgeId(overrides?: CallOverrides): Promise<string>;

  "forgeId()"(overrides?: CallOverrides): Promise<string>;

  newYieldContracts(
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newYieldContracts(address,uint256)"(
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemAfterExpiry(
    msgSender: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemAfterExpiry(address,address,uint256,address)"(
    msgSender: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemDueInterests(
    msgSender: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemDueInterests(address,address,uint256)"(
    msgSender: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemDueInterestsBeforeTransfer(
    underlyingAsset: string,
    expiry: BigNumberish,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
    underlyingAsset: string,
    expiry: BigNumberish,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    msgSender: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    amountToRedeem: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemUnderlying(address,address,uint256,uint256,address)"(
    msgSender: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    amountToRedeem: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenizeYield(
    msgSender: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    amountToTokenize: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenizeYield(address,address,uint256,uint256,address)"(
    msgSender: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    amountToTokenize: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    core(overrides?: CallOverrides): Promise<string>;

    "core()"(overrides?: CallOverrides): Promise<string>;

    forgeId(overrides?: CallOverrides): Promise<string>;

    "forgeId()"(overrides?: CallOverrides): Promise<string>;

    newYieldContracts(
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "newYieldContracts(address,uint256)"(
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    redeemAfterExpiry(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemAfterExpiry(address,address,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDueInterests(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemDueInterests(address,address,uint256)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDueInterestsBeforeTransfer(
      underlyingAsset: string,
      expiry: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
      underlyingAsset: string,
      expiry: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToRedeem: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemUnderlying(address,address,uint256,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToRedeem: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenizeYield(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToTokenize: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "tokenizeYield(address,address,uint256,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToTokenize: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;
  };

  filters: {
    MintYieldToken(
      underlyingYieldToken: string | null,
      amount: null
    ): EventFilter;

    NewYieldContracts(
      ot: string | null,
      xyt: string | null,
      expiry: null
    ): EventFilter;

    RedeemYieldToken(
      underlyingYieldToken: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    core(overrides?: CallOverrides): Promise<BigNumber>;

    "core()"(overrides?: CallOverrides): Promise<BigNumber>;

    forgeId(overrides?: CallOverrides): Promise<BigNumber>;

    "forgeId()"(overrides?: CallOverrides): Promise<BigNumber>;

    newYieldContracts(
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newYieldContracts(address,uint256)"(
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemAfterExpiry(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemAfterExpiry(address,address,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemDueInterests(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemDueInterests(address,address,uint256)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemDueInterestsBeforeTransfer(
      underlyingAsset: string,
      expiry: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
      underlyingAsset: string,
      expiry: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToRedeem: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemUnderlying(address,address,uint256,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToRedeem: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenizeYield(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToTokenize: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenizeYield(address,address,uint256,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToTokenize: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "core()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forgeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forgeId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newYieldContracts(
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newYieldContracts(address,uint256)"(
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemAfterExpiry(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemAfterExpiry(address,address,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemDueInterests(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemDueInterests(address,address,uint256)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemDueInterestsBeforeTransfer(
      underlyingAsset: string,
      expiry: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
      underlyingAsset: string,
      expiry: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToRedeem: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemUnderlying(address,address,uint256,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToRedeem: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenizeYield(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToTokenize: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenizeYield(address,address,uint256,uint256,address)"(
      msgSender: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      amountToTokenize: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
