/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { DateUtils } from "../DateUtils";

export class DateUtils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<DateUtils> {
    return super.deploy(overrides || {}) as Promise<DateUtils>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DateUtils {
    return super.attach(address) as DateUtils;
  }
  connect(signer: Signer): DateUtils__factory {
    return super.connect(signer) as DateUtils__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DateUtils {
    return new Contract(address, _abi, signerOrProvider) as DateUtils;
  }
}

const _abi = [
  {
    inputs: [],
    name: "DAY_IN_SECONDS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "LEAP_YEAR_IN_SECONDS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ORIGIN_YEAR",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "YEAR_IN_SECONDS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_month",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "_year",
        type: "uint16",
      },
    ],
    name: "getDaysInMonth",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "getYear",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_year",
        type: "uint16",
      },
    ],
    name: "isLeapYear",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_year",
        type: "uint256",
      },
    ],
    name: "leapYearsBefore",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "parseTimestamp",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "year",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "month",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "day",
            type: "uint8",
          },
        ],
        internalType: "struct DateUtils.Date",
        name: "d",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "toRFC2822String",
    outputs: [
      {
        internalType: "string",
        name: "s",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610944610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c806392d663131161007057806392d6631314610110578063a6f0e57714610123578063b199993714610143578063b238ad0e14610156578063f97d059114610176576100a8565b80632fdd854d146100ad5780635fdc6281146100cb57806367bb0f95146100e05780637847ea53146100e85780637e5e5943146100f0575b600080fd5b6100b5610196565b6040516100c291906108b8565b60405180910390f35b6100d361019c565b6040516100c291906108c7565b6100d36101a3565b6100d36101ab565b6101036100fe3660046107b6565b6101b3565b6040516100c29190610855565b6100b561011e3660046107b6565b61022d565b610136610131366004610795565b6102bf565b6040516100c2919061084a565b6100d36101513660046107b6565b6102fb565b6101696101643660046107ce565b610316565b6040516100c291906108d0565b6101896101843660046107b6565b6103dd565b6040516100c29190610888565b6107b281565b6201518081565b6301e2850081565b6301e1338081565b60606101bd61073b565b6101c6836103dd565b905060606101da826040015160ff166104e5565b905060606101e7836105bd565b905060606101fc846000015161ffff166104e5565b905082828260405160200161021393929190610807565b604051602081830303815290604052945050505050919050565b6000806107b26301e1338084048101908290610248906102fb565b6102558361ffff166102fb565b039050806301e285000283019250806107b2830361ffff16036301e1338002830192505b848311156102b55761028d600183036102bf565b156102a0576301e28500830392506102aa565b6301e13380830392505b600182039150610279565b509150505b919050565b6000600382161580156102de5750606461ffff83160661ffff16600014155b806102f5575061019061ffff83160661ffff166000145b92915050565b60001901600061019082046064830460048404030192915050565b60008260ff166001148061032d57508260ff166003145b8061033b57508260ff166005145b8061034957508260ff166007145b8061035757508260ff166008145b8061036557508260ff16600a145b8061037357508260ff16600c145b156103805750601f6102f5565b8260ff166004148061039557508260ff166006145b806103a357508260ff166009145b806103b157508260ff16600b145b156103be5750601e6102f5565b6103c7826102bf565b156103d45750601d6102f5565b50601c92915050565b6103e561073b565b600080806103f28561022d565b61ffff1684526104036107b26102fb565b84516104129061ffff166102fb565b039150816301e285000283019250816107b285600001510361ffff16036301e1338002830192506000600191505b600c8260ff161161048a57610459828660000151610316565b60ff166201518002905085848201111561047b5760ff8216602086015261048a565b92830192600190910190610440565b600191505b6104a185602001518660000151610316565b60ff168260ff16116104dc578584620151800111156104c85760ff821660408601526104dc565b62015180939093019260019091019061048f565b50505050919050565b60608161050a57506040805180820190915260018152600360fc1b60208201526102ba565b8160005b811561052257600101600a8204915061050e565b60608167ffffffffffffffff8111801561053b57600080fd5b506040519080825280601f01601f191660200182016040528015610566576020820181803683370190505b50905060001982015b85156105b457600a860660300160f81b8282806001900393508151811061059257fe5b60200101906001600160f81b031916908160001a905350600a8604955061056f565b50949350505050565b60606105c761075b565b50604080516101c08101825260036101808201818152622520a760e91b6101a0840152825282518084018452818152622322a160e91b60208083019190915280840191909152835180850185528281526226a0a960e91b8183015283850152835180850185528281526220a82960e91b81830152606084015283518085018552828152624d415960e81b8183015260808401528351808501855282815262252aa760e91b8183015260a0840152835180850185528281526212955360ea1b8183015260c0840152835180850185528281526241554760e81b8183015260e0840152835180850185528281526205345560ec1b81830152610100840152835180850185528281526213d0d560ea1b8183015261012084015283518085018552828152622727ab60e91b8183015261014084015283518085019094529083526244454360e81b838201526101608201929092529083015181906000190160ff16600c811061072f57fe5b60200201519392505050565b604080516060810182526000808252602082018190529181019190915290565b604051806101800160405280600c905b606081526020019060019003908161076b5790505090565b803561ffff811681146102ba57600080fd5b6000602082840312156107a6578081fd5b6107af82610783565b9392505050565b6000602082840312156107c7578081fd5b5035919050565b600080604083850312156107e0578081fd5b823560ff811681146107f0578182fd5b91506107fe60208401610783565b90509250929050565b600084516108198184602089016108de565b84519083019061082d8183602089016108de565b84519101906108408183602088016108de565b0195945050505050565b901515815260200190565b60006020825282518060208401526108748160408501602087016108de565b601f01601f19169190910160400192915050565b600060608201905061ffff835116825260ff602084015116602083015260ff604084015116604083015292915050565b61ffff91909116815260200190565b90815260200190565b60ff91909116815260200190565b60005b838110156108f95781810151838201526020016108e1565b83811115610908576000848401525b5050505056fea26469706673582212204d94d74a5723c6427d15f42a11bde052a8e095c6c4ec8251118b4ad4be7557c764736f6c63430007040033";
