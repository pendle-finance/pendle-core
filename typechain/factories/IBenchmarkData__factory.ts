/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from "ethers";
import { Provider } from "@ethersproject/providers";

import type { IBenchmarkData } from "../IBenchmarkData";

export class IBenchmarkData__factory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBenchmarkData {
    return new Contract(address, _abi, signerOrProvider) as IBenchmarkData;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "core",
        type: "address",
      },
    ],
    name: "CoreSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "forgeAddress",
        type: "address",
      },
    ],
    name: "ForgeAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "forgeAddress",
        type: "address",
      },
    ],
    name: "ForgeRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "forgeAddress",
        type: "address",
      },
    ],
    name: "addForge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "addMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "allMarketsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "core",
    outputs: [
      {
        internalType: "contract IBenchmark",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "exitFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllMarkets",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "underlyingYieldToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
    ],
    name: "getBenchmarkYieldTokens",
    outputs: [
      {
        internalType: "contract IBenchmarkYieldToken",
        name: "ot",
        type: "address",
      },
      {
        internalType: "contract IBenchmarkYieldToken",
        name: "xyt",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
    ],
    name: "getForgeAddress",
    outputs: [
      {
        internalType: "address",
        name: "forgeAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forgeAddress",
        type: "address",
      },
    ],
    name: "getForgeId",
    outputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "xyt",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getMarket",
    outputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "xyt",
        type: "address",
      },
    ],
    name: "isValidXYT",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "underlyingYieldToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
    ],
    name: "otTokens",
    outputs: [
      {
        internalType: "contract IBenchmarkYieldToken",
        name: "ot",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
    ],
    name: "removeForge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IBenchmark",
        name: "_core",
        type: "address",
      },
    ],
    name: "setCore",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_swapFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_exitFee",
        type: "uint256",
      },
    ],
    name: "setMarketFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "xyt",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "storeMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "ot",
        type: "address",
      },
      {
        internalType: "address",
        name: "xyt",
        type: "address",
      },
      {
        internalType: "address",
        name: "underlyingYieldToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
    ],
    name: "storeTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "forgeId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "underlyingAsset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
    ],
    name: "xytTokens",
    outputs: [
      {
        internalType: "contract IBenchmarkYieldToken",
        name: "xyt",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];
