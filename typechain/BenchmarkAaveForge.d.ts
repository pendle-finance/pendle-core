/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BenchmarkAaveForgeInterface extends ethers.utils.Interface {
  functions: {
    "aaveLendingPoolCore()": FunctionFragment;
    "core()": FunctionFragment;
    "forgeId()": FunctionFragment;
    "lastNormalisedIncome(address,uint256,address)": FunctionFragment;
    "lastNormalisedIncomeBeforeExpiry(address,uint256)": FunctionFragment;
    "newYieldContracts(address,uint256)": FunctionFragment;
    "redeemAfterExpiry(address,address,uint256,address)": FunctionFragment;
    "redeemDueInterests(address,address,uint256)": FunctionFragment;
    "redeemDueInterestsBeforeTransfer(address,uint256,address)": FunctionFragment;
    "redeemUnderlying(address,address,uint256,uint256,address)": FunctionFragment;
    "tokenizeYield(address,address,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aaveLendingPoolCore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(functionFragment: "forgeId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastNormalisedIncome",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastNormalisedIncomeBeforeExpiry",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newYieldContracts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAfterExpiry",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterests",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterestsBeforeTransfer",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizeYield",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "aaveLendingPoolCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forgeId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastNormalisedIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastNormalisedIncomeBeforeExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newYieldContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAfterExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterestsBeforeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenizeYield",
    data: BytesLike
  ): Result;

  events: {
    "MintYieldToken(address,uint256)": EventFragment;
    "NewYieldContracts(address,address,uint256)": EventFragment;
    "RedeemYieldToken(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintYieldToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewYieldContracts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemYieldToken"): EventFragment;
}

export class BenchmarkAaveForge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BenchmarkAaveForgeInterface;

  functions: {
    aaveLendingPoolCore(overrides?: CallOverrides): Promise<[string]>;

    "aaveLendingPoolCore()"(overrides?: CallOverrides): Promise<[string]>;

    core(overrides?: CallOverrides): Promise<[string]>;

    "core()"(overrides?: CallOverrides): Promise<[string]>;

    forgeId(overrides?: CallOverrides): Promise<[string]>;

    "forgeId()"(overrides?: CallOverrides): Promise<[string]>;

    lastNormalisedIncome(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastNormalisedIncome(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastNormalisedIncomeBeforeExpiry(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastNormalisedIncomeBeforeExpiry(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newYieldContracts(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newYieldContracts(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemAfterExpiry(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemAfterExpiry(address,address,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemDueInterests(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemDueInterests(address,address,uint256)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemDueInterestsBeforeTransfer(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemUnderlying(address,address,uint256,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenizeYield(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenizeYield(address,address,uint256,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  aaveLendingPoolCore(overrides?: CallOverrides): Promise<string>;

  "aaveLendingPoolCore()"(overrides?: CallOverrides): Promise<string>;

  core(overrides?: CallOverrides): Promise<string>;

  "core()"(overrides?: CallOverrides): Promise<string>;

  forgeId(overrides?: CallOverrides): Promise<string>;

  "forgeId()"(overrides?: CallOverrides): Promise<string>;

  lastNormalisedIncome(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastNormalisedIncome(address,uint256,address)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastNormalisedIncomeBeforeExpiry(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastNormalisedIncomeBeforeExpiry(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newYieldContracts(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newYieldContracts(address,uint256)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemAfterExpiry(
    _msgSender: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemAfterExpiry(address,address,uint256,address)"(
    _msgSender: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemDueInterests(
    _msgSender: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemDueInterests(address,address,uint256)"(
    _msgSender: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemDueInterestsBeforeTransfer(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    _msgSender: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToRedeem: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemUnderlying(address,address,uint256,uint256,address)"(
    _msgSender: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToRedeem: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenizeYield(
    _msgSender: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToTokenize: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenizeYield(address,address,uint256,uint256,address)"(
    _msgSender: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToTokenize: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    aaveLendingPoolCore(overrides?: CallOverrides): Promise<string>;

    "aaveLendingPoolCore()"(overrides?: CallOverrides): Promise<string>;

    core(overrides?: CallOverrides): Promise<string>;

    "core()"(overrides?: CallOverrides): Promise<string>;

    forgeId(overrides?: CallOverrides): Promise<string>;

    "forgeId()"(overrides?: CallOverrides): Promise<string>;

    lastNormalisedIncome(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastNormalisedIncome(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastNormalisedIncomeBeforeExpiry(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastNormalisedIncomeBeforeExpiry(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newYieldContracts(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "newYieldContracts(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    redeemAfterExpiry(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemAfterExpiry(address,address,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDueInterests(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemDueInterests(address,address,uint256)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDueInterestsBeforeTransfer(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemUnderlying(address,address,uint256,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenizeYield(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "tokenizeYield(address,address,uint256,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;
  };

  filters: {
    MintYieldToken(
      underlyingYieldToken: string | null,
      amount: null
    ): EventFilter;

    NewYieldContracts(
      ot: string | null,
      xyt: string | null,
      expiry: null
    ): EventFilter;

    RedeemYieldToken(
      underlyingYieldToken: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    aaveLendingPoolCore(overrides?: CallOverrides): Promise<BigNumber>;

    "aaveLendingPoolCore()"(overrides?: CallOverrides): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    "core()"(overrides?: CallOverrides): Promise<BigNumber>;

    forgeId(overrides?: CallOverrides): Promise<BigNumber>;

    "forgeId()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastNormalisedIncome(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastNormalisedIncome(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastNormalisedIncomeBeforeExpiry(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastNormalisedIncomeBeforeExpiry(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newYieldContracts(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newYieldContracts(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemAfterExpiry(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemAfterExpiry(address,address,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemDueInterests(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemDueInterests(address,address,uint256)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemDueInterestsBeforeTransfer(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemUnderlying(address,address,uint256,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenizeYield(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenizeYield(address,address,uint256,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aaveLendingPoolCore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aaveLendingPoolCore()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "core()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forgeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forgeId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastNormalisedIncome(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastNormalisedIncome(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastNormalisedIncomeBeforeExpiry(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastNormalisedIncomeBeforeExpiry(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newYieldContracts(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newYieldContracts(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemAfterExpiry(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemAfterExpiry(address,address,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemDueInterests(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemDueInterests(address,address,uint256)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemDueInterestsBeforeTransfer(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemDueInterestsBeforeTransfer(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemUnderlying(address,address,uint256,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenizeYield(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenizeYield(address,address,uint256,uint256,address)"(
      _msgSender: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
