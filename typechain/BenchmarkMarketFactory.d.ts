/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BenchmarkMarketFactoryInterface extends ethers.utils.Interface {
  functions: {
    "core()": FunctionFragment;
    "createMarket(bytes32,address,address,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "setCore(address)": FunctionFragment;
    "withdrawEther(uint256,address)": FunctionFragment;
    "withdrawToken(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [BytesLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "setCore", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "CoreSet(address)": EventFragment;
    "EtherWithdraw(uint256,address)": EventFragment;
    "MarketCreated(address,address,address)": EventFragment;
    "TokenWithdraw(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CoreSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdraw"): EventFragment;
}

export class BenchmarkMarketFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BenchmarkMarketFactoryInterface;

  functions: {
    core(overrides?: CallOverrides): Promise<[string]>;

    "core()"(overrides?: CallOverrides): Promise<[string]>;

    createMarket(
      _forgeId: BytesLike,
      _xyt: string,
      _token: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createMarket(bytes32,address,address,uint256)"(
      _forgeId: BytesLike,
      _xyt: string,
      _token: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _core: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _core: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCore(_core: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setCore(address)"(
      _core: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  core(overrides?: CallOverrides): Promise<string>;

  "core()"(overrides?: CallOverrides): Promise<string>;

  createMarket(
    _forgeId: BytesLike,
    _xyt: string,
    _token: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createMarket(bytes32,address,address,uint256)"(
    _forgeId: BytesLike,
    _xyt: string,
    _token: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _core: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _core: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCore(_core: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setCore(address)"(
    _core: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawEther(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawEther(uint256,address)"(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256,address)"(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    core(overrides?: CallOverrides): Promise<string>;

    "core()"(overrides?: CallOverrides): Promise<string>;

    createMarket(
      _forgeId: BytesLike,
      _xyt: string,
      _token: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createMarket(bytes32,address,address,uint256)"(
      _forgeId: BytesLike,
      _xyt: string,
      _token: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    initialize(_core: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _core: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCore(_core: string, overrides?: CallOverrides): Promise<void>;

    "setCore(address)"(_core: string, overrides?: CallOverrides): Promise<void>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CoreSet(core: null): EventFilter;

    EtherWithdraw(amount: null, sendTo: null): EventFilter;

    MarketCreated(
      xyt: string | null,
      token: string | null,
      market: string | null
    ): EventFilter;

    TokenWithdraw(token: null, amount: null, sendTo: null): EventFilter;
  };

  estimateGas: {
    core(overrides?: CallOverrides): Promise<BigNumber>;

    "core()"(overrides?: CallOverrides): Promise<BigNumber>;

    createMarket(
      _forgeId: BytesLike,
      _xyt: string,
      _token: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createMarket(bytes32,address,address,uint256)"(
      _forgeId: BytesLike,
      _xyt: string,
      _token: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_core: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _core: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCore(_core: string, overrides?: Overrides): Promise<BigNumber>;

    "setCore(address)"(
      _core: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "core()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createMarket(
      _forgeId: BytesLike,
      _xyt: string,
      _token: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createMarket(bytes32,address,address,uint256)"(
      _forgeId: BytesLike,
      _xyt: string,
      _token: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _core: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _core: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCore(
      _core: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCore(address)"(
      _core: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
