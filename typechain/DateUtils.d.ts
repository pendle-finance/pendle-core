/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DateUtilsInterface extends ethers.utils.Interface {
  functions: {
    "DAY_IN_SECONDS()": FunctionFragment;
    "LEAP_YEAR_IN_SECONDS()": FunctionFragment;
    "ORIGIN_YEAR()": FunctionFragment;
    "YEAR_IN_SECONDS()": FunctionFragment;
    "getDaysInMonth(uint8,uint16)": FunctionFragment;
    "getYear(uint256)": FunctionFragment;
    "isLeapYear(uint16)": FunctionFragment;
    "leapYearsBefore(uint256)": FunctionFragment;
    "parseTimestamp(uint256)": FunctionFragment;
    "toRFC2822String(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DAY_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEAP_YEAR_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORIGIN_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YEAR_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDaysInMonth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeapYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leapYearsBefore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toRFC2822String",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DAY_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEAP_YEAR_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORIGIN_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "YEAR_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDaysInMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLeapYear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leapYearsBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toRFC2822String",
    data: BytesLike
  ): Result;

  events: {};
}

export class DateUtils extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DateUtilsInterface;

  functions: {
    DAY_IN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DAY_IN_SECONDS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    LEAP_YEAR_IN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "LEAP_YEAR_IN_SECONDS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORIGIN_YEAR(overrides?: CallOverrides): Promise<[number]>;

    "ORIGIN_YEAR()"(overrides?: CallOverrides): Promise<[number]>;

    YEAR_IN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "YEAR_IN_SECONDS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDaysInMonth(
      _month: BigNumberish,
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getDaysInMonth(uint8,uint16)"(
      _month: BigNumberish,
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getYear(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getYear(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isLeapYear(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLeapYear(uint16)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leapYearsBefore(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "leapYearsBefore(uint256)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    parseTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, number] & { year: number; month: number; day: number }
      ] & {
        d: [number, number, number] & {
          year: number;
          month: number;
          day: number;
        };
      }
    >;

    "parseTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, number] & { year: number; month: number; day: number }
      ] & {
        d: [number, number, number] & {
          year: number;
          month: number;
          day: number;
        };
      }
    >;

    toRFC2822String(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { s: string }>;

    "toRFC2822String(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { s: string }>;
  };

  DAY_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  "DAY_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

  LEAP_YEAR_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  "LEAP_YEAR_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

  ORIGIN_YEAR(overrides?: CallOverrides): Promise<number>;

  "ORIGIN_YEAR()"(overrides?: CallOverrides): Promise<number>;

  YEAR_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  "YEAR_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDaysInMonth(
    _month: BigNumberish,
    _year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "getDaysInMonth(uint8,uint16)"(
    _month: BigNumberish,
    _year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getYear(_timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "getYear(uint256)"(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  isLeapYear(_year: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isLeapYear(uint16)"(
    _year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  leapYearsBefore(
    _year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "leapYearsBefore(uint256)"(
    _year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  parseTimestamp(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & { year: number; month: number; day: number }
  >;

  "parseTimestamp(uint256)"(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & { year: number; month: number; day: number }
  >;

  toRFC2822String(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "toRFC2822String(uint256)"(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    DAY_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    "DAY_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    LEAP_YEAR_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    "LEAP_YEAR_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORIGIN_YEAR(overrides?: CallOverrides): Promise<number>;

    "ORIGIN_YEAR()"(overrides?: CallOverrides): Promise<number>;

    YEAR_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    "YEAR_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDaysInMonth(
      _month: BigNumberish,
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getDaysInMonth(uint8,uint16)"(
      _month: BigNumberish,
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getYear(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getYear(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    isLeapYear(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLeapYear(uint16)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    leapYearsBefore(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "leapYearsBefore(uint256)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & { year: number; month: number; day: number }
    >;

    "parseTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & { year: number; month: number; day: number }
    >;

    toRFC2822String(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "toRFC2822String(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    DAY_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    "DAY_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    LEAP_YEAR_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    "LEAP_YEAR_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORIGIN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    "ORIGIN_YEAR()"(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    "YEAR_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDaysInMonth(
      _month: BigNumberish,
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDaysInMonth(uint8,uint16)"(
      _month: BigNumberish,
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYear(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYear(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLeapYear(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLeapYear(uint16)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leapYearsBefore(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "leapYearsBefore(uint256)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "parseTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toRFC2822String(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toRFC2822String(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAY_IN_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DAY_IN_SECONDS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LEAP_YEAR_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LEAP_YEAR_IN_SECONDS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ORIGIN_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORIGIN_YEAR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YEAR_IN_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YEAR_IN_SECONDS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDaysInMonth(
      _month: BigNumberish,
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDaysInMonth(uint8,uint16)"(
      _month: BigNumberish,
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYear(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getYear(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLeapYear(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLeapYear(uint16)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leapYearsBefore(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "leapYearsBefore(uint256)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parseTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toRFC2822String(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toRFC2822String(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
