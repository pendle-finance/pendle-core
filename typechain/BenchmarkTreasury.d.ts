/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BenchmarkTreasuryInterface extends ethers.utils.Interface {
  functions: {
    "MAX_FUND_PERCENTAGE()": FunctionFragment;
    "PERCENTAGE_PRECISION()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "fundPercentage()": FunctionFragment;
    "fundToken()": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "setFundPercentage(uint256)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdrawEther(uint256,address)": FunctionFragment;
    "withdrawToken(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_FUND_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fundToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFundPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_FUND_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "EtherWithdraw(uint256,address)": EventFragment;
    "TokenWithdraw(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EtherWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdraw"): EventFragment;
}

export class BenchmarkTreasury extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BenchmarkTreasuryInterface;

  functions: {
    MAX_FUND_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_FUND_PERCENTAGE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PERCENTAGE_PRECISION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fundPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fundPercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundToken(overrides?: CallOverrides): Promise<[string]>;

    "fundToken()"(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _fundToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _fundToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFundPercentage(
      _fundPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFundPercentage(uint256)"(
      _fundPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MAX_FUND_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_FUND_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  "PERCENTAGE_PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fundPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "fundPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundToken(overrides?: CallOverrides): Promise<string>;

  "fundToken()"(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _fundToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _fundToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFundPercentage(
    _fundPercentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFundPercentage(uint256)"(
    _fundPercentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    withdrawAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    amount: BigNumberish,
    withdrawAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawEther(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawEther(uint256,address)"(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256,address)"(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_FUND_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FUND_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENTAGE_PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "fundPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundToken(overrides?: CallOverrides): Promise<string>;

    "fundToken()"(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    initialize(_fundToken: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _fundToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundPercentage(
      _fundPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFundPercentage(uint256)"(
      _fundPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: BigNumberish,
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    EtherWithdraw(amount: null, sendTo: null): EventFilter;

    TokenWithdraw(token: null, amount: null, sendTo: null): EventFilter;
  };

  estimateGas: {
    MAX_FUND_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FUND_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    "PERCENTAGE_PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fundPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "fundPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundToken(overrides?: CallOverrides): Promise<BigNumber>;

    "fundToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_fundToken: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _fundToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFundPercentage(
      _fundPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFundPercentage(uint256)"(
      _fundPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_FUND_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_FUND_PERCENTAGE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENTAGE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PERCENTAGE_PRECISION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fundPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _fundToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _fundToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFundPercentage(
      _fundPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFundPercentage(uint256)"(
      _fundPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      withdrawAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
