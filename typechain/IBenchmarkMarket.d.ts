/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBenchmarkMarketInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "core()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "exitPoolByAll(uint256,uint256,uint256)": FunctionFragment;
    "exitPoolSingleToken(address,uint256,uint256)": FunctionFragment;
    "expiry()": FunctionFragment;
    "factory()": FunctionFragment;
    "forge()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "joinPoolByAll(uint256,uint256,uint256)": FunctionFragment;
    "joinPoolSingleToken(address,uint256,uint256)": FunctionFragment;
    "minLiquidity()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "spotPrice(address,address)": FunctionFragment;
    "swapAmountIn(uint256,address,address,uint256,uint256)": FunctionFragment;
    "swapAmountOut(address,uint256,address,uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "xyt()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPoolByAll",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPoolSingleToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "forge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPoolByAll",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPoolSingleToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spotPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAmountIn",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAmountOut",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "xyt", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPoolByAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPoolSingleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinPoolByAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinPoolSingleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spotPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xyt", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(address,uint256)": EventFragment;
    "Exit(address,address,uint256)": EventFragment;
    "Join(address,address,uint256)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "Shift(uint256,uint256,uint256,uint256)": EventFragment;
    "Swap(address,uint256,uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Join"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Shift"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class IBenchmarkMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBenchmarkMarketInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    core(overrides?: CallOverrides): Promise<[string]>;

    "core()"(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPoolByAll(
      inAmountLp: BigNumberish,
      minOutAmountXyt: BigNumberish,
      minOutAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPoolByAll(uint256,uint256,uint256)"(
      inAmountLp: BigNumberish,
      minOutAmountXyt: BigNumberish,
      minOutAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPoolSingleToken(
      outToken: string,
      inAmountLp: BigNumberish,
      minOutAmountToken: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPoolSingleToken(address,uint256,uint256)"(
      outToken: string,
      inAmountLp: BigNumberish,
      minOutAmountToken: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    expiry(overrides?: Overrides): Promise<ContractTransaction>;

    "expiry()"(overrides?: Overrides): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    forge(overrides?: CallOverrides): Promise<[string]>;

    "forge()"(overrides?: CallOverrides): Promise<[string]>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        xytReserves: BigNumber;
        tokenReserves: BigNumber;
        lastBlockTimestamp: number;
      }
    >;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        xytReserves: BigNumber;
        tokenReserves: BigNumber;
        lastBlockTimestamp: number;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinPoolByAll(
      outAmountLp: BigNumberish,
      maxInAmoutXyt: BigNumberish,
      maxInAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinPoolByAll(uint256,uint256,uint256)"(
      outAmountLp: BigNumberish,
      maxInAmoutXyt: BigNumberish,
      maxInAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinPoolSingleToken(
      inToken: string,
      inAmount: BigNumberish,
      minOutAmountLp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinPoolSingleToken(address,uint256,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      minOutAmountLp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minLiquidity()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    spotPrice(
      inToken: string,
      outToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "spotPrice(address,address)"(
      inToken: string,
      outToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapAmountIn(
      inAmount: BigNumberish,
      inToken: string,
      outToken: string,
      minOutAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapAmountIn(uint256,address,address,uint256,uint256)"(
      inAmount: BigNumberish,
      inToken: string,
      outToken: string,
      minOutAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapAmountOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapAmountOut(address,uint256,address,uint256,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    xyt(overrides?: CallOverrides): Promise<[string]>;

    "xyt()"(overrides?: CallOverrides): Promise<[string]>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  core(overrides?: CallOverrides): Promise<string>;

  "core()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPoolByAll(
    inAmountLp: BigNumberish,
    minOutAmountXyt: BigNumberish,
    minOutAmountPair: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPoolByAll(uint256,uint256,uint256)"(
    inAmountLp: BigNumberish,
    minOutAmountXyt: BigNumberish,
    minOutAmountPair: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPoolSingleToken(
    outToken: string,
    inAmountLp: BigNumberish,
    minOutAmountToken: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPoolSingleToken(address,uint256,uint256)"(
    outToken: string,
    inAmountLp: BigNumberish,
    minOutAmountToken: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  expiry(overrides?: Overrides): Promise<ContractTransaction>;

  "expiry()"(overrides?: Overrides): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  forge(overrides?: CallOverrides): Promise<string>;

  "forge()"(overrides?: CallOverrides): Promise<string>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      xytReserves: BigNumber;
      tokenReserves: BigNumber;
      lastBlockTimestamp: number;
    }
  >;

  "getReserves()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      xytReserves: BigNumber;
      tokenReserves: BigNumber;
      lastBlockTimestamp: number;
    }
  >;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinPoolByAll(
    outAmountLp: BigNumberish,
    maxInAmoutXyt: BigNumberish,
    maxInAmountPair: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinPoolByAll(uint256,uint256,uint256)"(
    outAmountLp: BigNumberish,
    maxInAmoutXyt: BigNumberish,
    maxInAmountPair: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinPoolSingleToken(
    inToken: string,
    inAmount: BigNumberish,
    minOutAmountLp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinPoolSingleToken(address,uint256,uint256)"(
    inToken: string,
    inAmount: BigNumberish,
    minOutAmountLp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "minLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  spotPrice(
    inToken: string,
    outToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "spotPrice(address,address)"(
    inToken: string,
    outToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapAmountIn(
    inAmount: BigNumberish,
    inToken: string,
    outToken: string,
    minOutAmount: BigNumberish,
    maxPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapAmountIn(uint256,address,address,uint256,uint256)"(
    inAmount: BigNumberish,
    inToken: string,
    outToken: string,
    minOutAmount: BigNumberish,
    maxPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapAmountOut(
    inToken: string,
    maxInAmount: BigNumberish,
    outToken: string,
    outAmount: BigNumberish,
    maxPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapAmountOut(address,uint256,address,uint256,uint256)"(
    inToken: string,
    maxInAmount: BigNumberish,
    outToken: string,
    outAmount: BigNumberish,
    maxPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  xyt(overrides?: CallOverrides): Promise<string>;

  "xyt()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    core(overrides?: CallOverrides): Promise<string>;

    "core()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exitPoolByAll(
      inAmountLp: BigNumberish,
      minOutAmountXyt: BigNumberish,
      minOutAmountPair: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPoolByAll(uint256,uint256,uint256)"(
      inAmountLp: BigNumberish,
      minOutAmountXyt: BigNumberish,
      minOutAmountPair: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPoolSingleToken(
      outToken: string,
      inAmountLp: BigNumberish,
      minOutAmountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitPoolSingleToken(address,uint256,uint256)"(
      outToken: string,
      inAmountLp: BigNumberish,
      minOutAmountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    forge(overrides?: CallOverrides): Promise<string>;

    "forge()"(overrides?: CallOverrides): Promise<string>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        xytReserves: BigNumber;
        tokenReserves: BigNumber;
        lastBlockTimestamp: number;
      }
    >;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        xytReserves: BigNumber;
        tokenReserves: BigNumber;
        lastBlockTimestamp: number;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinPoolByAll(
      outAmountLp: BigNumberish,
      maxInAmoutXyt: BigNumberish,
      maxInAmountPair: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "joinPoolByAll(uint256,uint256,uint256)"(
      outAmountLp: BigNumberish,
      maxInAmoutXyt: BigNumberish,
      maxInAmountPair: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    joinPoolSingleToken(
      inToken: string,
      inAmount: BigNumberish,
      minOutAmountLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "joinPoolSingleToken(address,uint256,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      minOutAmountLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    spotPrice(
      inToken: string,
      outToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "spotPrice(address,address)"(
      inToken: string,
      outToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapAmountIn(
      inAmount: BigNumberish,
      inToken: string,
      outToken: string,
      minOutAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        outAmount: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    "swapAmountIn(uint256,address,address,uint256,uint256)"(
      inAmount: BigNumberish,
      inToken: string,
      outToken: string,
      minOutAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        outAmount: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    swapAmountOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        inAmount: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    "swapAmountOut(address,uint256,address,uint256,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        inAmount: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    xyt(overrides?: CallOverrides): Promise<string>;

    "xyt()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Burn(account: string | null, amount: null): EventFilter;

    Exit(lp: string | null, token: string | null, amount: null): EventFilter;

    Join(lp: string | null, token: string | null, amount: null): EventFilter;

    Mint(account: string | null, amount: null): EventFilter;

    Shift(
      xytWeightOld: null,
      tokenWeightOld: null,
      xytWeightNew: null,
      tokenWeightNew: null
    ): EventFilter;

    Swap(
      trader: string | null,
      srcAmount: null,
      destAmount: null,
      destination: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    "core()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitPoolByAll(
      inAmountLp: BigNumberish,
      minOutAmountXyt: BigNumberish,
      minOutAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitPoolByAll(uint256,uint256,uint256)"(
      inAmountLp: BigNumberish,
      minOutAmountXyt: BigNumberish,
      minOutAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitPoolSingleToken(
      outToken: string,
      inAmountLp: BigNumberish,
      minOutAmountToken: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitPoolSingleToken(address,uint256,uint256)"(
      outToken: string,
      inAmountLp: BigNumberish,
      minOutAmountToken: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    expiry(overrides?: Overrides): Promise<BigNumber>;

    "expiry()"(overrides?: Overrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    forge(overrides?: CallOverrides): Promise<BigNumber>;

    "forge()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinPoolByAll(
      outAmountLp: BigNumberish,
      maxInAmoutXyt: BigNumberish,
      maxInAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinPoolByAll(uint256,uint256,uint256)"(
      outAmountLp: BigNumberish,
      maxInAmoutXyt: BigNumberish,
      maxInAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinPoolSingleToken(
      inToken: string,
      inAmount: BigNumberish,
      minOutAmountLp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinPoolSingleToken(address,uint256,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      minOutAmountLp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    minLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    spotPrice(
      inToken: string,
      outToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "spotPrice(address,address)"(
      inToken: string,
      outToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapAmountIn(
      inAmount: BigNumberish,
      inToken: string,
      outToken: string,
      minOutAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapAmountIn(uint256,address,address,uint256,uint256)"(
      inAmount: BigNumberish,
      inToken: string,
      outToken: string,
      minOutAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapAmountOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapAmountOut(address,uint256,address,uint256,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    xyt(overrides?: CallOverrides): Promise<BigNumber>;

    "xyt()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "core()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitPoolByAll(
      inAmountLp: BigNumberish,
      minOutAmountXyt: BigNumberish,
      minOutAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPoolByAll(uint256,uint256,uint256)"(
      inAmountLp: BigNumberish,
      minOutAmountXyt: BigNumberish,
      minOutAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitPoolSingleToken(
      outToken: string,
      inAmountLp: BigNumberish,
      minOutAmountToken: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPoolSingleToken(address,uint256,uint256)"(
      outToken: string,
      inAmountLp: BigNumberish,
      minOutAmountToken: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    expiry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "expiry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinPoolByAll(
      outAmountLp: BigNumberish,
      maxInAmoutXyt: BigNumberish,
      maxInAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinPoolByAll(uint256,uint256,uint256)"(
      outAmountLp: BigNumberish,
      maxInAmoutXyt: BigNumberish,
      maxInAmountPair: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinPoolSingleToken(
      inToken: string,
      inAmount: BigNumberish,
      minOutAmountLp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinPoolSingleToken(address,uint256,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      minOutAmountLp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minLiquidity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spotPrice(
      inToken: string,
      outToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "spotPrice(address,address)"(
      inToken: string,
      outToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapAmountIn(
      inAmount: BigNumberish,
      inToken: string,
      outToken: string,
      minOutAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapAmountIn(uint256,address,address,uint256,uint256)"(
      inAmount: BigNumberish,
      inToken: string,
      outToken: string,
      minOutAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapAmountOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapAmountOut(address,uint256,address,uint256,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      maxPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    xyt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xyt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
