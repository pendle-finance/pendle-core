/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BenchmarkInterface extends ethers.utils.Interface {
  functions: {
    "addForge(bytes32,address)": FunctionFragment;
    "addMarketLiquidity(address,address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "addMarketLiquidityETH(address,uint256,uint256,uint256,address)": FunctionFragment;
    "data()": FunctionFragment;
    "factory()": FunctionFragment;
    "getDestAmount(uint256,uint256,uint256)": FunctionFragment;
    "getDestAmounts(uint256,address[])": FunctionFragment;
    "getMarketRate(uint256,uint256,uint256)": FunctionFragment;
    "getSrcAmount(uint256,uint256,uint256)": FunctionFragment;
    "getSrcAmounts(uint256,address[])": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "newYieldContracts(bytes32,address,uint256)": FunctionFragment;
    "redeemAfterExpiry(bytes32,address,uint256,address)": FunctionFragment;
    "redeemDueInterests(bytes32,address,uint256)": FunctionFragment;
    "redeemUnderlying(bytes32,address,uint256,uint256,address)": FunctionFragment;
    "removeForge(bytes32)": FunctionFragment;
    "removeMarketLiquidity(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "removeMarketLiquidityETH(address,uint256,uint256,uint256,address)": FunctionFragment;
    "setContracts(address,address,address)": FunctionFragment;
    "swapEthToToken(uint256,address[],address,uint256)": FunctionFragment;
    "swapTokenToEth(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokenToToken(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "tokenizeYield(bytes32,address,uint256,uint256,address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawEther(uint256,address)": FunctionFragment;
    "withdrawToken(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addForge",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketLiquidityETH",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDestAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDestAmounts",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSrcAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSrcAmounts",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newYieldContracts",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAfterExpiry",
    values: [BytesLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterests",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [BytesLike, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeForge",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarketLiquidity",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarketLiquidityETH",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEthToToken",
    values: [BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenToEth",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenToToken",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizeYield",
    values: [BytesLike, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addForge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMarketLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDestAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDestAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSrcAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSrcAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newYieldContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAfterExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeForge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEthToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenToEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenizeYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "ContractsSet(address,address,address)": EventFragment;
    "EtherWithdraw(uint256,address)": EventFragment;
    "TokenWithdraw(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdraw"): EventFragment;
}

export class Benchmark extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BenchmarkInterface;

  functions: {
    addForge(
      _forgeId: BytesLike,
      _forgeAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addForge(bytes32,address)"(
      _forgeId: BytesLike,
      _forgeAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addMarketLiquidity(
      xyt: string,
      token: string,
      xytAmountDesired: BigNumberish,
      tokenAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMarketLiquidity(address,address,uint256,uint256,uint256,uint256,address)"(
      xyt: string,
      token: string,
      xytAmountDesired: BigNumberish,
      tokenAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addMarketLiquidityETH(
      xyt: string,
      xytAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
      xyt: string,
      xytAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    data(overrides?: CallOverrides): Promise<[string]>;

    "data()"(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getDestAmount(
      srcAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { destAmount: BigNumber }>;

    "getDestAmount(uint256,uint256,uint256)"(
      srcAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { destAmount: BigNumber }>;

    getDestAmounts(
      srcAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { destAmounts: BigNumber[] }>;

    "getDestAmounts(uint256,address[])"(
      srcAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { destAmounts: BigNumber[] }>;

    getMarketRate(
      srcAmount: BigNumberish,
      marketA: BigNumberish,
      marketB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { destAmount: BigNumber }>;

    "getMarketRate(uint256,uint256,uint256)"(
      srcAmount: BigNumberish,
      marketA: BigNumberish,
      marketB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { destAmount: BigNumber }>;

    getSrcAmount(
      destAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { srcAmount: BigNumber }>;

    "getSrcAmount(uint256,uint256,uint256)"(
      destAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { srcAmount: BigNumber }>;

    getSrcAmounts(
      destAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { srcAmounts: BigNumber[] }>;

    "getSrcAmounts(uint256,address[])"(
      destAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { srcAmounts: BigNumber[] }>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newYieldContracts(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newYieldContracts(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemAfterExpiry(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemAfterExpiry(bytes32,address,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemDueInterests(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemDueInterests(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemUnderlying(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeForge(
      _forgeId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeForge(bytes32)"(
      _forgeId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMarketLiquidity(
      xyt: string,
      token: string,
      liquidity: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMarketLiquidity(address,address,uint256,uint256,uint256,address)"(
      xyt: string,
      token: string,
      liquidity: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMarketLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      tokenAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
      token: string,
      liquidity: BigNumberish,
      tokenAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setContracts(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setContracts(address,address,address)"(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapEthToToken(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapEthToToken(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapTokenToEth(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokenToEth(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokenToToken(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokenToToken(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenizeYield(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenizeYield(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addForge(
    _forgeId: BytesLike,
    _forgeAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addForge(bytes32,address)"(
    _forgeId: BytesLike,
    _forgeAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addMarketLiquidity(
    xyt: string,
    token: string,
    xytAmountDesired: BigNumberish,
    tokenAmountDesired: BigNumberish,
    xytAmountMin: BigNumberish,
    tokenAmountMin: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMarketLiquidity(address,address,uint256,uint256,uint256,uint256,address)"(
    xyt: string,
    token: string,
    xytAmountDesired: BigNumberish,
    tokenAmountDesired: BigNumberish,
    xytAmountMin: BigNumberish,
    tokenAmountMin: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addMarketLiquidityETH(
    xyt: string,
    xytAmountDesired: BigNumberish,
    xytAmountMin: BigNumberish,
    ethAmountMin: BigNumberish,
    to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
    xyt: string,
    xytAmountDesired: BigNumberish,
    xytAmountMin: BigNumberish,
    ethAmountMin: BigNumberish,
    to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  data(overrides?: CallOverrides): Promise<string>;

  "data()"(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getDestAmount(
    srcAmount: BigNumberish,
    srcMarket: BigNumberish,
    destMarket: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDestAmount(uint256,uint256,uint256)"(
    srcAmount: BigNumberish,
    srcMarket: BigNumberish,
    destMarket: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDestAmounts(
    srcAmount: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getDestAmounts(uint256,address[])"(
    srcAmount: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMarketRate(
    srcAmount: BigNumberish,
    marketA: BigNumberish,
    marketB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMarketRate(uint256,uint256,uint256)"(
    srcAmount: BigNumberish,
    marketA: BigNumberish,
    marketB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSrcAmount(
    destAmount: BigNumberish,
    srcMarket: BigNumberish,
    destMarket: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSrcAmount(uint256,uint256,uint256)"(
    destAmount: BigNumberish,
    srcMarket: BigNumberish,
    destMarket: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSrcAmounts(
    destAmount: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getSrcAmounts(uint256,address[])"(
    destAmount: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _data: string,
    _factory: string,
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _data: string,
    _factory: string,
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newYieldContracts(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newYieldContracts(bytes32,address,uint256)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemAfterExpiry(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemAfterExpiry(bytes32,address,uint256,address)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemDueInterests(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemDueInterests(bytes32,address,uint256)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToRedeem: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemUnderlying(bytes32,address,uint256,uint256,address)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToRedeem: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeForge(
    _forgeId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeForge(bytes32)"(
    _forgeId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMarketLiquidity(
    xyt: string,
    token: string,
    liquidity: BigNumberish,
    xytAmountMin: BigNumberish,
    tokenAmountMin: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMarketLiquidity(address,address,uint256,uint256,uint256,address)"(
    xyt: string,
    token: string,
    liquidity: BigNumberish,
    xytAmountMin: BigNumberish,
    tokenAmountMin: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMarketLiquidityETH(
    token: string,
    liquidity: BigNumberish,
    tokenAmountMin: BigNumberish,
    ethAmountMin: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
    token: string,
    liquidity: BigNumberish,
    tokenAmountMin: BigNumberish,
    ethAmountMin: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setContracts(
    _data: string,
    _factory: string,
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setContracts(address,address,address)"(
    _data: string,
    _factory: string,
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapEthToToken(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapEthToToken(uint256,address[],address,uint256)"(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapTokenToEth(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokenToEth(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokenToToken(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokenToToken(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenizeYield(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToTokenize: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenizeYield(bytes32,address,uint256,uint256,address)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToTokenize: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  withdrawEther(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawEther(uint256,address)"(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256,address)"(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addForge(
      _forgeId: BytesLike,
      _forgeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addForge(bytes32,address)"(
      _forgeId: BytesLike,
      _forgeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMarketLiquidity(
      xyt: string,
      token: string,
      xytAmountDesired: BigNumberish,
      tokenAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        xytAmount: BigNumber;
        tokenAmount: BigNumber;
        liquidity: BigNumber;
      }
    >;

    "addMarketLiquidity(address,address,uint256,uint256,uint256,uint256,address)"(
      xyt: string,
      token: string,
      xytAmountDesired: BigNumberish,
      tokenAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        xytAmount: BigNumber;
        tokenAmount: BigNumber;
        liquidity: BigNumber;
      }
    >;

    addMarketLiquidityETH(
      xyt: string,
      xytAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToken: BigNumber;
        amountETH: BigNumber;
        liquidity: BigNumber;
      }
    >;

    "addMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
      xyt: string,
      xytAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToken: BigNumber;
        amountETH: BigNumber;
        liquidity: BigNumber;
      }
    >;

    data(overrides?: CallOverrides): Promise<string>;

    "data()"(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getDestAmount(
      srcAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDestAmount(uint256,uint256,uint256)"(
      srcAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDestAmounts(
      srcAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getDestAmounts(uint256,address[])"(
      srcAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMarketRate(
      srcAmount: BigNumberish,
      marketA: BigNumberish,
      marketB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketRate(uint256,uint256,uint256)"(
      srcAmount: BigNumberish,
      marketA: BigNumberish,
      marketB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSrcAmount(
      destAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSrcAmount(uint256,uint256,uint256)"(
      destAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSrcAmounts(
      destAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getSrcAmounts(uint256,address[])"(
      destAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    newYieldContracts(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "newYieldContracts(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    redeemAfterExpiry(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemAfterExpiry(bytes32,address,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDueInterests(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemDueInterests(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemUnderlying(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeForge(_forgeId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "removeForge(bytes32)"(
      _forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMarketLiquidity(
      xyt: string,
      token: string,
      liquidity: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { xytAmount: BigNumber; tokenAmount: BigNumber }
    >;

    "removeMarketLiquidity(address,address,uint256,uint256,uint256,address)"(
      xyt: string,
      token: string,
      liquidity: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { xytAmount: BigNumber; tokenAmount: BigNumber }
    >;

    removeMarketLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      tokenAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenAmount: BigNumber; ethAmount: BigNumber }
    >;

    "removeMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
      token: string,
      liquidity: BigNumberish,
      tokenAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenAmount: BigNumber; ethAmount: BigNumber }
    >;

    setContracts(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContracts(address,address,address)"(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapEthToToken(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapEthToToken(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokenToEth(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokenToEth(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokenToToken(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokenToToken(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokenizeYield(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "tokenizeYield(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ContractsSet(data: null, factory: null, treasury: null): EventFilter;

    EtherWithdraw(amount: null, sendTo: null): EventFilter;

    TokenWithdraw(token: null, amount: null, sendTo: null): EventFilter;
  };

  estimateGas: {
    addForge(
      _forgeId: BytesLike,
      _forgeAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addForge(bytes32,address)"(
      _forgeId: BytesLike,
      _forgeAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addMarketLiquidity(
      xyt: string,
      token: string,
      xytAmountDesired: BigNumberish,
      tokenAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addMarketLiquidity(address,address,uint256,uint256,uint256,uint256,address)"(
      xyt: string,
      token: string,
      xytAmountDesired: BigNumberish,
      tokenAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addMarketLiquidityETH(
      xyt: string,
      xytAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
      xyt: string,
      xytAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    "data()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDestAmount(
      srcAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDestAmount(uint256,uint256,uint256)"(
      srcAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDestAmounts(
      srcAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDestAmounts(uint256,address[])"(
      srcAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketRate(
      srcAmount: BigNumberish,
      marketA: BigNumberish,
      marketB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketRate(uint256,uint256,uint256)"(
      srcAmount: BigNumberish,
      marketA: BigNumberish,
      marketB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSrcAmount(
      destAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSrcAmount(uint256,uint256,uint256)"(
      destAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSrcAmounts(
      destAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSrcAmounts(uint256,address[])"(
      destAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    newYieldContracts(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newYieldContracts(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemAfterExpiry(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemAfterExpiry(bytes32,address,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemDueInterests(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemDueInterests(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemUnderlying(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeForge(_forgeId: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "removeForge(bytes32)"(
      _forgeId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMarketLiquidity(
      xyt: string,
      token: string,
      liquidity: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeMarketLiquidity(address,address,uint256,uint256,uint256,address)"(
      xyt: string,
      token: string,
      liquidity: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMarketLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      tokenAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
      token: string,
      liquidity: BigNumberish,
      tokenAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setContracts(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setContracts(address,address,address)"(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapEthToToken(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapEthToToken(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapTokenToEth(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokenToEth(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokenToToken(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokenToToken(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenizeYield(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenizeYield(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addForge(
      _forgeId: BytesLike,
      _forgeAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addForge(bytes32,address)"(
      _forgeId: BytesLike,
      _forgeAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addMarketLiquidity(
      xyt: string,
      token: string,
      xytAmountDesired: BigNumberish,
      tokenAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMarketLiquidity(address,address,uint256,uint256,uint256,uint256,address)"(
      xyt: string,
      token: string,
      xytAmountDesired: BigNumberish,
      tokenAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addMarketLiquidityETH(
      xyt: string,
      xytAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
      xyt: string,
      xytAmountDesired: BigNumberish,
      xytAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "data()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDestAmount(
      srcAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDestAmount(uint256,uint256,uint256)"(
      srcAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDestAmounts(
      srcAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDestAmounts(uint256,address[])"(
      srcAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketRate(
      srcAmount: BigNumberish,
      marketA: BigNumberish,
      marketB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketRate(uint256,uint256,uint256)"(
      srcAmount: BigNumberish,
      marketA: BigNumberish,
      marketB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSrcAmount(
      destAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSrcAmount(uint256,uint256,uint256)"(
      destAmount: BigNumberish,
      srcMarket: BigNumberish,
      destMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSrcAmounts(
      destAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSrcAmounts(uint256,address[])"(
      destAmount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newYieldContracts(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newYieldContracts(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemAfterExpiry(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemAfterExpiry(bytes32,address,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemDueInterests(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemDueInterests(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemUnderlying(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeForge(
      _forgeId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeForge(bytes32)"(
      _forgeId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMarketLiquidity(
      xyt: string,
      token: string,
      liquidity: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMarketLiquidity(address,address,uint256,uint256,uint256,address)"(
      xyt: string,
      token: string,
      liquidity: BigNumberish,
      xytAmountMin: BigNumberish,
      tokenAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMarketLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      tokenAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMarketLiquidityETH(address,uint256,uint256,uint256,address)"(
      token: string,
      liquidity: BigNumberish,
      tokenAmountMin: BigNumberish,
      ethAmountMin: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setContracts(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setContracts(address,address,address)"(
      _data: string,
      _factory: string,
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapEthToToken(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapEthToToken(uint256,address[],address,uint256)"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapTokenToEth(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokenToEth(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokenToToken(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokenToToken(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenizeYield(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenizeYield(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
